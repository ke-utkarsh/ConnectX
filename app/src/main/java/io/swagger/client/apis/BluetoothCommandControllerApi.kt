/**
 * Hela API
 * \"REST API for EA1H Application\"
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.GetBluetoothCommandDTO
import io.swagger.client.models.LogBluetoothCommandDTO
import io.swagger.client.models.ResponseBody

import io.swagger.client.infrastructure.*

class BluetoothCommandControllerApi(basePath: kotlin.String = "http://iymconnected-api-dev.ap-south-1.elasticbeanstalk.com/") : ApiClient(basePath) {

    /**
     * getBluetoothCommandsForChasis
     *
     * @param body oGetBluetoothCommandDTO
     * @param authorization
     * @return ResponseBody
     */
    @Suppress("UNCHECKED_CAST")
    fun getBluetoothCommandsForChasisUsingGET(
        body: GetBluetoothCommandDTO,
        authorization: kotlin.String
    ): ResponseBody {
        val localVariableBody: kotlin.Any? = body

        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> =
            mapOf("Authorization" to authorization)
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/bluetooth/get-bt-commands", headers = localVariableHeaders
        )
        val response = request<ResponseBody>(
            localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ResponseBody
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )
            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     * getBluetoothCommandsForChasis
     *
     * @param authorization
     * @param src src
     * @return ResponseBody
     */
    @Suppress("UNCHECKED_CAST")
    fun getBluetoothCommandsForChasisUsingPOST(
        authorization: kotlin.String,
        src: kotlin.String
    ): ResponseBody {
        val localVariableQuery: MultiValueMap = mapOf("src" to listOf("$src"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> =
            mapOf("Authorization" to authorization)
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/bluetooth/get-all-bt-commands",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ResponseBody>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ResponseBody
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )
            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }

    /**
     * logExecutedCommand
     *
     * @param body commands
     * @param authorization
     * @return ResponseBody
     */
    @Suppress("UNCHECKED_CAST")
    fun logExecutedCommandUsingPOST(
        body: kotlin.Array<LogBluetoothCommandDTO>,
        authorization: kotlin.String
    ): ResponseBody {
        val localVariableBody: kotlin.Any? = body

        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> =
            mapOf("Authorization" to authorization)
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/bluetooth/log-command", headers = localVariableHeaders
        )
        val response = request<ResponseBody>(
            localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ResponseBody
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )
            ResponseType.ServerError -> throw ServerException(
                (response as ServerError<*>).message ?: "Server error"
            )
        }
    }
}