/**
 * EA1H API
 * \"REST API for EA1H Application\"
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.BikeListRequest
import io.swagger.client.models.ChassisVerificationDTO
import io.swagger.client.models.ResponseBody
import io.swagger.client.models.RemoveBikeMappingRequest

import io.swagger.client.infrastructure.*

class BikeControllerApi(basePath: kotlin.String = "//iymconnected-api-dev.ap-south-1.elasticbeanstalk.com/") : ApiClient(basePath) {

    /**
     * getBikeImages
     *
     * @param authorization
     * @return ResponseBody
     */
    @Suppress("UNCHECKED_CAST")
    fun getBikeImagesUsingGET(authorization: kotlin.String): ResponseBody {

        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Authorization" to authorization)
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/bike/image/list", headers = localVariableHeaders
        )
        val response = request<ResponseBody>(
            localVariableConfig, null
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ResponseBody
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * getListAndUpdateAppVersion
     *
     * @param body requestModel
     * @param authorization
     * @return ResponseBody
     */
    @Suppress("UNCHECKED_CAST")
    fun getListAndUpdateAppVersionUsingPOST(body: BikeListRequest, authorization: kotlin.String): ResponseBody {
        val localVariableBody: kotlin.Any? = body

        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Authorization" to authorization)
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/bike/getListAndUpdateAppVersion", headers = localVariableHeaders
        )
        val response = request<ResponseBody>(
            localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ResponseBody
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * getListOfBikesByUserId
     *
     * @param authorization
     * @param lastUpdatedOn lastUpdatedOn
     * @return ResponseBody
     */
    @Suppress("UNCHECKED_CAST")
    fun getListOfBikesByUserIdUsingGET(authorization: kotlin.String, lastUpdatedOn: kotlin.Long): ResponseBody {
        val localVariableQuery: MultiValueMap = mapOf("lastUpdatedOn" to listOf("$lastUpdatedOn"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Authorization" to authorization)
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/bike/list", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<ResponseBody>(
            localVariableConfig, null
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ResponseBody
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * uploadBikeImages
     *
     * @param contentFile
     * @param authorization
     * @param soucre soucre
     * @return ResponseBody
     */
    @Suppress("UNCHECKED_CAST")
    fun uploadBikeImagesUsingPOST(contentFile: kotlin.Array<kotlin.Byte>, authorization: kotlin.String, soucre: kotlin.String): ResponseBody {
        val localVariableBody: kotlin.Any? = mapOf("contentFile" to "$contentFile")
        val localVariableQuery: MultiValueMap = mapOf("soucre" to listOf("$soucre"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Content-Type" to "multipart/form-data", "Authorization" to authorization)
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/bike/add-bike-image/", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<ResponseBody>(
            localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ResponseBody
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * validateChasis
     *
     * @param body oChassisVerificationDTO
     * @param authorization
     * @return ResponseBody
     */
    @Suppress("UNCHECKED_CAST")
    fun validateChasisUsingPOST(body: ChassisVerificationDTO, authorization: kotlin.String): ResponseBody {
        val localVariableBody: kotlin.Any? = body

        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Authorization" to authorization)
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/bike/validate-chasis", headers = localVariableHeaders
        )
        val response = request<ResponseBody>(
            localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ResponseBody
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
     * removeMapping
     *
     * @param body model
     * @param authorization
     * @return ResponseBody
     */
    @Suppress("UNCHECKED_CAST")
    fun removeMappingUsingPOST(body: RemoveBikeMappingRequest, authorization: kotlin.String): ResponseBody {
        val localVariableBody: kotlin.Any? = body

        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Authorization" to authorization)
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/bike/remove-mapping", headers = localVariableHeaders
        )
        val response = request<ResponseBody>(
            localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ResponseBody
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
