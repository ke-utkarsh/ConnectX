/**
 * Hela API
 * \"REST API for EA1H Application\"
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.ResponseBody
import io.swagger.client.models.UserProfileDetails

import io.swagger.client.infrastructure.*

class UserControllerApi(basePath: kotlin.String = "http://iymconnected-api-dev.ap-south-1.elasticbeanstalk.com/") : ApiClient(basePath) {

    /**
     * getUserDetails
     * 
     * @param authorization  
     * @param userId userId 
     * @return ResponseBody
     */
    @Suppress("UNCHECKED_CAST")
    fun getUserDetailsUsingGET(authorization: kotlin.String, userId: kotlin.String): ResponseBody {
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Authorization" to authorization)
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/user/get-profile-details/{userId}".replace("{" + "userId" + "}", "$userId"), headers = localVariableHeaders
        )
        val response = request<ResponseBody>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ResponseBody
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * updateUserDetails
     * 
     * @param authorization  
     * @param contentFile  (optional)
     * @param imageData  (optional)
     * @param name  (optional)
     * @param userId  (optional)
     * @return ResponseBody
     */
    @Suppress("UNCHECKED_CAST")
    fun updateUserDetailsUsingPOST(authorization: kotlin.String, contentFile: kotlin.Array<kotlin.Byte>? = null, imageData: kotlin.String? = null, name: kotlin.String? = null, userId: kotlin.String? = null): ResponseBody {
        val localVariableBody: kotlin.Any? = mapOf("contentFile" to "$contentFile")
        val localVariableQuery: MultiValueMap = mapOf("imageData" to listOf("$imageData"), "name" to listOf("$name"), "userId" to listOf("$userId"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Content-Type" to "multipart/form-data", "Authorization" to authorization)
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/user/edit-profile-details/", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<ResponseBody>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ResponseBody
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * updateUserDetails
     * 
     * @param body oUserImageDetails 
     * @param authorization  
     * @return ResponseBody
     */
    @Suppress("UNCHECKED_CAST")
    fun updateUserDetailsUsingPOST1(body: UserProfileDetails, authorization: kotlin.String): ResponseBody {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Authorization" to authorization)
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/user/update-profile-details/", headers = localVariableHeaders
        )
        val response = request<ResponseBody>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ResponseBody
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
