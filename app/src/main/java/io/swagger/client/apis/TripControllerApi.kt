/**
 * Hela API
 * \"REST API for EA1H Application\"
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.ResponseBody
import io.swagger.client.models.TripDetailRequestDTO
import io.swagger.client.models.TripHistory
import io.swagger.client.models.TripHistoryRequestDTO

import io.swagger.client.infrastructure.*

class TripControllerApi(basePath: kotlin.String = "http://iymconnected-api-dev.ap-south-1.elasticbeanstalk.com/") : ApiClient(basePath) {

    /**
     * addTrip
     * 
     * @param body trips 
     * @param authorization  
     * @return ResponseBody
     */
    @Suppress("UNCHECKED_CAST")
    fun addTripUsingPOST(body: kotlin.Array<TripHistory>, authorization: kotlin.String): ResponseBody {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Authorization" to authorization)
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/trip/add-trip", headers = localVariableHeaders
        )
        val response = request<ResponseBody>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ResponseBody
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * getTripDetail
     * 
     * @param body requestModel 
     * @param authorization  
     * @return ResponseBody
     */
    @Suppress("UNCHECKED_CAST")
    fun getTripDetailUsingPOST(body: TripDetailRequestDTO, authorization: kotlin.String): ResponseBody {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Authorization" to authorization)
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/trip/detail", headers = localVariableHeaders
        )
        val response = request<ResponseBody>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ResponseBody
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * getTripHistory
     * 
     * @param body requestModel 
     * @param authorization  
     * @return ResponseBody
     */
    @Suppress("UNCHECKED_CAST")
    fun getTripHistoryUsingPOST(body: TripHistoryRequestDTO, authorization: kotlin.String): ResponseBody {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Authorization" to authorization)
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/trip/history", headers = localVariableHeaders
        )
        val response = request<ResponseBody>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ResponseBody
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
